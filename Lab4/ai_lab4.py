# -*- coding: utf-8 -*-
"""AI_lab4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uMco2imhS5XEFzHX5Xt4vEQAJYfu2r_s
"""

import numpy as np
import math

# Function to update the board with a move
def update_board(current_board, move, position):
    board = current_board.copy()
    board[position] = move
    return board

# Function to check if the game is over and return the score
def game_over(board_state, evaluated):
    board = board_state.copy()

    for i in range(0, 7, 3):
        if board[i] == board[i + 1] == board[i + 2] != ' ':
            return (10 if board[i] == 'X' else -10), evaluated + 1

    for i in range(0, 3):
        if board[i] == board[i + 3] == board[i + 6] != ' ':
            return (10 if board[i] == 'X' else -10), evaluated + 1

    if board[0] == board[4] == board[8] != ' ':
        return (10 if board[0] == 'X' else -10), evaluated + 1
    if board[2] == board[4] == board[6] != ' ':
        return (10 if board[2] == 'X' else -10), evaluated + 1

    if ' ' not in board:
        return 0, evaluated + 1

    return -1, evaluated + 1

# Function to get empty positions on the board
def get_empty_positions(current_board):
    return np.where(current_board == ' ')[0]

# Minimax algorithm implementation
def minmax_algo(depth, maximize, current_board, evaluated):
    move = 'X' if maximize else 'O'
    score, evaluated = game_over(current_board, evaluated)

    if depth == 0 or score != -1:
        return score, current_board, evaluated

    if maximize:
        max_eval = -math.inf
        empty_positions = get_empty_positions(current_board)
        best_board = None
        for position in empty_positions:
            updated_board = update_board(current_board, move, position)
            eval_score, best_temp, evaluated = minmax_algo(depth - 1, False, updated_board, evaluated)
            if eval_score > max_eval:
                max_eval = eval_score
                best_board = best_temp
        return max_eval, best_board, evaluated
    else:
        min_eval = math.inf
        empty_positions = get_empty_positions(current_board)
        best_board = None
        for position in empty_positions:
            updated_board = update_board(current_board, move, position)
            eval_score, best_temp, evaluated = minmax_algo(depth - 1, True, updated_board, evaluated)
            if eval_score < min_eval:
                min_eval = eval_score
                best_board = best_temp
        return min_eval, best_board, evaluated

# Alpha-beta pruning algorithm implementation
def alpha_beta_pruning(depth, maximize, alpha, beta, current_board, evaluated):
    move = 'X' if maximize else 'O'
    score, evaluated = game_over(current_board, evaluated)

    if depth == 0 or score != -1:
        return score, evaluated

    if maximize:
        max_eval = -math.inf
        empty_positions = get_empty_positions(current_board)
        for position in empty_positions:
            updated_board = update_board(current_board, move, position)
            eval_score, evaluated = alpha_beta_pruning(depth - 1, False, alpha, beta, updated_board, evaluated)
            max_eval = max(max_eval, eval_score)
            alpha = max(alpha, eval_score)
            if beta <= alpha:
                break
        return max_eval, evaluated
    else:
        min_eval = math.inf
        empty_positions = get_empty_positions(current_board)
        for position in empty_positions:
            updated_board = update_board(current_board, move, position)
            eval_score, evaluated = alpha_beta_pruning(depth - 1, True, alpha, beta, updated_board, evaluated)
            min_eval = min(min_eval, eval_score)
            beta = min(beta, eval_score)
            if beta <= alpha:
                break
        return min_eval, evaluated

# Initial empty board
initial_board = np.array([' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '])

# Applying Minimax algorithm
points, final_board, nodes_evaluated = minmax_algo(9, True, initial_board, 0)

# Applying Alpha-beta pruning algorithm
points_abp, nodes_evaluated_abp = alpha_beta_pruning(9, True, -math.inf, math.inf, initial_board, 0)

# Output results
print("Minimax Algorithm:")
print("Score:", points)
print("Final Board:\n", final_board.reshape(3, 3))
print("Nodes Evaluated:", nodes_evaluated)

print("\nAlpha-Beta Pruning:")
print("Score:", points_abp)
print("Nodes Evaluated:", nodes_evaluated_abp)